use RBS::Types::Bases::Bottom

module Linguadata
  VERSION: String

  # See the writing guide of rbs: https://github.com/ruby/rbs#guides
  class Error < StandardError
  end

  module Option
    class Some[T]
      include _Option[T]
    end

    class None
      include _Option[Bottom]
    end

    interface _Option[T]
      def value: () -> T

      def unwrap: () -> T

      def some?: () -> bool

      def none?: () -> bool

      def map: [U] { (T) -> U } -> _Option[U]
    end

    def from_nillable: [T] (T? value) -> _Option[T]
  end

  module Result
    Success: Data & _Result[top, top]
    Failure: Data & _Result[top, top]

    interface _Result[T, E]

    end
  end
end
