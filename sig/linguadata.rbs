module Linguadata
  VERSION: String

  module DataHelpers
    class ZeroItemData < Data
      def deconstruct: () -> [ ]

      def deconstruct_keys: (?Array[Symbol]?) -> { }
    end

    class OneItemData[out T] < Data
      def deconstruct: () -> [T]

      def deconstruct_keys: (?Array[Symbol]?) -> ({ } | { Symbol: T })
    end
  end

  module Option
    type option[out T] = Some[T] | None

    class Some[out T] < DataHelpers::OneItemData[T]
      include _Option[T]

      def self.new: [T] (T) -> Some[T]

      def self.[]: [T] (T) -> Some[T]
    end

    class None < DataHelpers::ZeroItemData
      include _Option[bot]

      def self.new: () -> None

      def self.[]: () -> None
    end

    interface _Option[out T]
      def value: () -> T

      alias unwrap value

      def some?: () -> bool

      def none?: () -> bool

      def unwrap_or: [U] (U) -> (T | U)

      def unwrap_or_else: [U] { () -> U } -> (T | U)

      def map: [U] { (T) -> U } -> option[U]

      def and_then: [U] { (T) -> option[U] } -> option[U]

      def filter: { (T) -> bool } -> option[T]
    end

    def self.from_nillable: [T] (T? value) -> option[T]

    class NoValueError < StandardError
    end
  end

  module Result
    type result[out T, out E] = Success[T] | Failure[E]

    class Success[out T] < DataHelpers::OneItemData[T]
      include _Result[T, bot]

      def self.new: [T] (T) -> Success[T]

      def self.[]: [T] (T) -> Success[T]
    end

    class Failure[out E] < DataHelpers::OneItemData[E]
      include _Result[bot, E]

      def self.new: [E] (E) -> Failure[E]

      def self.[]: [E] (E) -> Failure[E]
    end

    interface _Result[out T, out E]
      def value: () -> T

      def error: () -> E

      alias unwrap value
      alias unwrap_failure error

      def success?: () -> bool

      def failure?: () -> bool

      def success: () -> Option::option[T]

      def failure: () -> Option::option[E]

      def map: [U] { (T) -> U } -> result[U, E]

      def map_failure: [F] { (E) -> F } -> result[T, F]

      def and_then: [U, F] { (T) -> result[U, F] } -> result[U, E | F]

      def or_else: [U, F] { (E) -> result[U, F] } -> result[T | U, F]
    end

    class NoErrorInSuccessError < StandardError
    end

    class NoValueInFailureError < StandardError
    end
  end

  class RequiredBlockError < StandardError
  end
end
